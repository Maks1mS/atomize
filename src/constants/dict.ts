import * as CSS from 'csstype';

type CustomProperties = 'padding-x' | 'padding-y' | 'margin-x' | 'margin-y';

export type Dict = {
  [key in keyof CSS.PropertiesHyphen | CustomProperties]?: CSSProperty;
};

export interface CSSProperty {
  alias?: string;
  scale?: string;
  transformer?: string;
  type?: string[] | string;
  process?: boolean;
  compose?: string[];
}

const dict: Dict = {
  margin: { alias: 'm', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  'margin-top': { alias: 'mt', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  'margin-right': { alias: 'mr', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  'margin-bottom': {
    alias: 'mb',
    scale: 'space',
    transformer: 'space',
    type: ['number', 'string'],
  },
  'margin-left': { alias: 'ml', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  padding: { alias: 'p', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  'padding-top': { alias: 'pt', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  'padding-right': {
    alias: 'pr',
    scale: 'space',
    transformer: 'space',
    type: ['number', 'string'],
  },
  'padding-bottom': {
    alias: 'pb',
    scale: 'space',
    transformer: 'space',
    type: ['number', 'string'],
  },
  'padding-left': { alias: 'pl', scale: 'space', transformer: 'space', type: ['number', 'string'] },
  font: { type: 'string' },
  'font-size': {
    alias: 'fz',
    scale: 'fontSizes',
    transformer: 'fontSize',
    type: ['number', 'string'],
  },
  'font-variant': {
    alias: 'fv',
    type: 'string',
  },
  color: { alias: 'c', type: 'string' },
  cursor: { alias: 'cur', type: 'string' },
  transition: { alias: 'trs', type: 'string' },
  'transition-delay': { alias: 'trsde', type: 'string' },
  'transition-duration': { alias: 'trsdu', type: 'string' },
  'transition-property': { alias: 'trsp', type: 'string' },
  'transition-timing-function': { alias: 'trstf', type: 'string' },
  'object-fit': { alias: 'of', type: 'string' },
  'object-position': { alias: 'obp', type: 'string' },
  'font-family': { alias: 'ff', type: 'string' },
  'text-align': { alias: 'ta', type: 'string' },
  'text-transform': { alias: 'tt', type: 'string' },
  'word-spacing': { alias: 'wos', type: 'string' },
  'word-break': { alias: 'wob', type: 'string' },
  'white-space': { alias: 'whs', type: 'string' },
  'text-indent': { alias: 'ti', type: ['number', 'string'] },
  'mix-blend-mode': { alias: 'mbm', type: 'string' },
  'line-height': { alias: 'lh', type: ['number', 'string'] },
  'font-weight': { alias: 'fw', type: ['number', 'string'] },
  'font-style': { alias: 'fs', type: 'string' },
  'text-decoration': { alias: 'td', type: 'string' },
  'text-decoration-line': { alias: 'tdl', type: 'string' },
  'text-decoration-color': { alias: 'tdc', type: 'string' },
  'text-decoration-style': { alias: 'tds', type: 'string' },
  'text-decoration-thickness': { alias: 'tdth', type: 'string' },
  'letter-spacing': { alias: 'lts', transformer: 'pixel', type: ['number', 'string'] },
  display: { alias: 'd', type: 'string' },
  width: { alias: 'w', transformer: 'width', type: ['number', 'string'] },
  'max-width': { alias: 'maw', transformer: 'pixel', type: ['number', 'string'] },
  'min-width': { alias: 'miw', transformer: 'pixel', type: ['number', 'string'] },
  height: { alias: 'h', transformer: 'pixel', type: ['number', 'string'] },
  'max-height': { alias: 'mah', transformer: 'pixel', type: ['number', 'string'] },
  'min-height': { alias: 'mih', transformer: 'pixel', type: ['number', 'string'] },
  // 'size-width': { type: 'string' },
  // 'size-height': { type: 'string' },
  // 'ratio-padding': { type: ['number', 'string'] },
  // ratio: { type: ['number', 'string'] },
  'user-select': { alias: 'us', type: 'string' },
  'vertical-align': { alias: 'va', type: 'string' },
  'align-items': { alias: 'ai', type: 'string' },
  'align-content': { alias: 'ac', type: 'string' },
  'justify-items': { alias: 'ji', type: 'string' },
  'justify-content': { alias: 'jc', type: 'string' },
  'flex-wrap': { alias: 'fxw', type: 'string' },
  'flex-grow': { alias: 'fxg', type: 'string' },
  'flex-shrink': { alias: 'fxs', type: 'string' },
  'flex-basis': { alias: 'fxb', transformer: 'width', type: 'string' },
  'flex-direction': { alias: 'fxd', type: 'string' },
  flex: { alias: 'fx', type: 'string' },
  'justify-self': { alias: 'js', type: 'string' },
  'align-self': { alias: 'asf', type: 'string' },
  order: { alias: 'ord', type: 'string' },
  'grid-gap': { type: 'string', scale: 'space', transformer: 'pixel' },
  'grid-column-gap': { type: 'string', scale: 'space', transformer: 'pixel' },
  'grid-row-gap': { type: 'string', scale: 'space', transformer: 'pixel' },
  'grid-column': { type: 'string', process: false },
  'grid-row': { type: 'string', process: false },
  'grid-auto-flow': { type: 'string' },
  'grid-auto-columns': { type: 'string' },
  'grid-auto-rows': { type: 'string' },
  'grid-template-columns': { type: 'string' },
  'grid-template-rows': { type: 'string' },
  'grid-template-areas': { type: 'string' },
  'grid-template': { type: 'string' },
  'grid-area': { type: 'string', process: false },
  border: { alias: 'bd', type: 'string' },
  'border-width': { alias: 'bdw', transformer: 'pixel', type: 'string' },
  'border-style': { alias: 'bds', type: 'string' },
  'border-top': { alias: 'bdt', type: 'string' },
  'border-right': { alias: 'bdr', type: 'string' },
  'border-bottom': { alias: 'bdb', type: 'string' },
  'border-left': { alias: 'bdl', type: 'string' },
  'border-color': { alias: 'bdc', type: 'string' },
  'border-radius': { alias: 'bdrs', transformer: 'pixel', type: 'string' },
  'box-shadow': { alias: 'bxsh', type: 'string' },
  'box-sizing': { alias: 'bxsz', type: 'string' },
  opacity: { alias: 'op', type: ['number', 'string'] },
  outline: { alias: 'ol', type: 'string' },
  overflow: { alias: 'ov', type: 'string' },
  background: { alias: 'bg', type: 'string' },
  'background-color': { alias: 'bgc', type: 'string' },
  'background-image': { alias: 'bgi', type: 'string' },
  'background-position': { alias: 'bgp', type: 'string' },
  'background-repeat': { alias: 'bgr', type: 'string' },
  'background-size': { alias: 'bgsz', type: 'string' },
  'background-blend-mode': { alias: 'bbm', type: 'string' },
  'background-attachment': { alias: 'bga', type: 'string' },
  filter: { alias: 'f', type: 'string' },
  position: { alias: 'pos', type: 'string' },
  'z-index': { alias: 'z', type: 'number' },
  top: { alias: 't', transformer: 'pixel', type: ['number', 'string'] },
  right: { alias: 'r', transformer: 'pixel', type: ['number', 'string'] },
  bottom: { alias: 'b', transformer: 'pixel', type: ['number', 'string'] },
  left: { alias: 'l', transformer: 'pixel', type: ['number', 'string'] },
  transform: { alias: 'trf', type: 'string' },
  'transform-origin': { alias: 'trfo', type: 'string' },
  'transform-style': { alias: 'trfs', type: 'string' },
  'list-style': { alias: 'lis', type: 'string' },
  'list-style-type': { alias: 'list', type: 'string' },
  'list-style-image': { alias: 'lisi', type: 'string' },
  'list-style-position': { alias: 'lisp', type: 'string' },
  'padding-x': {
    alias: 'px',
    transformer: 'pixel',
    type: ['number', 'string'],
    compose: ['paddingLeft', 'paddingRight'],
  },
  'padding-y': {
    alias: 'py',
    transformer: 'pixel',
    type: ['number', 'string'],
    compose: ['paddingTop', 'paddingBottom'],
  },
  'margin-x': {
    alias: 'mx',
    transformer: 'pixel',
    type: ['number', 'string'],
    compose: ['marginLeft', 'marginRight'],
  },
  'margin-y': {
    alias: 'my',
    transformer: 'pixel',
    type: ['number', 'string'],
    compose: ['marginTop', 'marginBottom'],
  },
  animation: { alias: 'anim', type: 'string' },
  'animation-delay': { alias: 'animdel', type: 'string' },
  'animation-direction': { alias: 'animdir', type: 'string' },
  'animation-duration': { alias: 'animdur', type: 'string' },
  'animation-fill-mode': { alias: 'animfm', type: 'string' },
  'animation-iteration-count': { alias: 'animic', type: 'string' },
  'animation-name': { alias: 'animn', type: 'string' },
  'animation-play-state': { alias: 'animps', type: 'string' },
  'animation-timing-function': { alias: 'animtf', type: 'string' },
  appearance: { alias: 'ap', type: 'string' },
  'border-bottom-color': { alias: 'bdbc', type: 'string' },
  // 'border-bottom-image': { alias: 'bdbi', type: 'string' },
  // 'border-break': { alias: 'bdbk', type: 'string' },
  // 'border-bottom-left-image': { alias: 'bdbli', type: 'string' },
  'border-bottom-left-radius': { alias: 'bdblrs', type: 'string' },
  // 'border-bottom-right-image': { alias: 'bdbri', type: 'string' },
  'border-bottom-right-radius': { alias: 'bdbrrs', type: 'string' },
  'border-bottom-style': { alias: 'bdbs', type: 'string' },
  'border-bottom-width': { alias: 'bdbw', type: 'string' },
  // 'border-corner-image': { alias: 'bdci', type: 'string' },
  'border-collapse': { alias: 'bdcl', type: 'string' },
  // 'border-fit': { alias: 'bdf', type: 'string' },
  'border-image': { alias: 'bdi', type: 'string' },
  'border-left-color': { alias: 'bdlc', type: 'string' },
  // 'border-length': { alias: 'bdlen', type: 'string' },
  // 'border-left-image': { alias: 'bdli', type: 'string' },
  'border-left-style': { alias: 'bdls', type: 'string' },
  'border-left-width': { alias: 'bdlw', type: 'string' },
  'border-right-color': { alias: 'bdrc', type: 'string' },
  // 'border-right-image': { alias: 'bdri', type: 'string' },
  'border-right-style': { alias: 'bdrst', type: 'string' },
  'border-right-width': { alias: 'bdrw', type: 'string' },
  'border-spacing': { alias: 'bdsp', type: 'string' },
  'border-top-color': { alias: 'bdtc', type: 'string' },
  // 'border-top-image': { alias: 'bdti', type: 'string' },
  // 'border-top-left-image': { alias: 'bdtli', type: 'string' },
  'border-top-left-radius': { alias: 'bdtlrs', type: 'string' },
  // 'border-top-right-image': { alias: 'bdtri', type: 'string' },
  'border-top-right-radius': { alias: 'bdtrrs', type: 'string' },
  'border-top-style': { alias: 'bdts', type: 'string' },
  'border-top-width': { alias: 'bdtw', type: 'string' },
  'backface-visibility': { alias: 'bfv', type: 'string' },
  // 'background-break': { alias: 'bgbk', type: 'string' },
  'background-clip': { alias: 'bgcp', type: 'string' },
  'background-origin': { alias: 'bgo', type: 'string' },
  'background-position-x': { alias: 'bgpx', type: 'string' },
  'background-position-y': { alias: 'bgpy', type: 'string' },
  clear: { alias: 'cl', type: 'string' },
  content: { alias: 'cnt', type: 'string' },
  'counter-increment': { alias: 'coi', type: 'string' },
  columns: { alias: 'colm', type: 'string' },
  'column-count': { alias: 'colmc', type: 'string' },
  'column-fill': { alias: 'colmf', type: 'string' },
  'column-gap': { alias: 'colmg', type: 'string' },
  'column-rule': { alias: 'colmr', type: 'string' },
  'column-rule-color': { alias: 'colmrc', type: 'string' },
  'column-rule-style': { alias: 'colmrs', type: 'string' },
  'column-rule-width': { alias: 'colmrw', type: 'string' },
  'column-span': { alias: 'colms', type: 'string' },
  'column-width': { alias: 'colmw', type: 'string' },
  'counter-reset': { alias: 'cor', type: 'string' },
  clip: { alias: 'cp', type: 'string' },
  'caption-side': { alias: 'cps', type: 'string' },
  'empty-cells': { alias: 'ec', type: 'string' },
  // 'font-display': { alias: 'fd', type: 'string' },
  // 'font-effect': { alias: 'fef', type: 'string' },
  // 'font-emphasize': { alias: 'fem', type: 'string' },
  // 'font-emphasize-position': { alias: 'femp', type: 'string' },
  // 'font-emphasize-style': { alias: 'fems', type: 'string' },
  float: { alias: 'fl', type: 'string' },
  // 'font-smoothing': { alias: 'fsm', type: 'string' },
  'font-stretch': { alias: 'fst', type: 'string' },
  'font-variation-settings': { alias: 'fvs', type: 'string' },
  'flex-flow': { alias: 'fxf', type: 'string' },
  'font-size-adjust': { alias: 'fsza', type: 'string' },
  grid: { alias: 'gd', type: 'string' },
  'grid-column-start': { alias: 'gcs', type: 'string' },
  'grid-column-end': { alias: 'gce', type: 'string' },
  'grid-row-start': { alias: 'grs', type: 'string' },
  'grid-row-end': { alias: 'gre', type: 'string' },
  // 'max-resolution': { alias: 'mar', type: 'string' },
  // 'min-resolution': { alias: 'mir', type: 'string' },
  'outline-color': { alias: 'olc', type: 'string' },
  'outline-offset': { alias: 'olo', type: 'string' },
  'outline-style': { alias: 'ols', type: 'string' },
  'outline-width': { alias: 'olw', type: 'string' },
  // orientation: { alias: 'ori', type: 'string' },
  orphans: { alias: 'orp', type: 'string' },
  // 'overflow-style': { alias: 'ovs', type: 'string' },
  'overflow-x': { alias: 'ovx', type: 'string' },
  'overflow-y': { alias: 'ovy', type: 'string' },
  'page-break-after': { alias: 'pgba', type: 'string' },
  'page-break-before': { alias: 'pgbb', type: 'string' },
  'page-break-inside': { alias: 'pgbi', type: 'string' },
  perspective: { alias: 'pspc', type: ['number', 'string'] },
  resize: { alias: 'rsz', type: 'string' },
  'text-align-last': { alias: 'tal', type: 'string' },
  'table-layout': { alias: 'tbl', type: 'string' },
  'text-emphasis': { alias: 'te', type: 'string' },
  // 'lin-height': { alias: 'th', type: 'string' },
  'text-justify': { alias: 'tj', type: 'string' },
  // 'text-outline': { alias: 'to', type: 'string' },
  'text-overflow': { alias: 'tov', type: 'string' },
  // 'text-replace': { alias: 'tr', type: 'string' },
  'text-shadow': { alias: 'tsh', type: 'string' },
  // 'text-wrap': { alias: 'tw', type: 'string' },
  visibility: { alias: 'v', type: 'string' },
  // 'white-space-collapse': { alias: 'whsc', type: 'string' },
  widows: { alias: 'wid', type: 'string' },
  'writing-mode': { alias: 'wm', type: 'string' },
  'word-wrap': { alias: 'wow', type: 'string' },
  zoom: { alias: 'zom', type: 'string' },
  fill: { alias: 'fil', type: 'string' },
};

export const hashPropsWithAliases = Object.keys(dict).reduce((acc, name) => {
  const propValue = { ...dict[name], name };
  acc[name] = propValue;
  if (propValue.alias) acc[propValue.alias] = propValue;
  return acc;
}, {});

export default dict;
